/*
 * mm-naive.c - The fastest, least memory-efficient malloc package.
 * 
 * In this naive approach, a block is allocated by simply incrementing
 * the brk pointer.  A block is pure payload. There are no headers or
 * footers.  Blocks are never coalesced or reused. Realloc is
 * implemented directly using mm_malloc and mm_free.
 *
 * NOTE TO STUDENTS: Replace this header comment with your own header
 * comment that gives a high level description of your solution.
 */
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <unistd.h>
#include <string.h>

#include "mm.h"
#include "memlib.h"


/*********************************************************
 * NOTE TO STUDENTS: Before you do anything else, please
 * provide your team information in the following struct.
 ********************************************************/
team_t team = {
    /* Team name */
    "ateam",
    /* First member's full name */
    "Harry Bovik",
    /* First member's email address */
    "bovik@cs.cmu.edu",
    /* Second member's full name (leave blank if none) */
    "",
    /* Second member's email address (leave blank if none) */
    ""
};

/* Initial size of heap (for expanding) */
#define CHUNKSIZE (1<<12) 

/* Extra bytes used by header and footer */
#define OVERHEAD 8

#define WSIZE 4 
#define DSIZE 8 // header size and footer size
#define XSIZE 16

/* Pack a size and allocated bit into a word */
#define PACK(size, alloc)    ((size) | (alloc))

/* Read and write a word at address p */ 
#define GET(p)                   (*(size_t *)(p)) 
#define PUT(p, val)             (*(size_t *)(p) = (val))


#define GET_SIZE(p) (GET(p) & ~0x7)
#define HDRP(bp) ((char*)(bp)-DSIZE)
#define FTRP(bp) ((char*)(bp)+GET_SIZE(HDRP(bp))-XSIZE)

/* Given block ptr, compute address of next and previous blocks */

#define NEXT_BLKP(bp) ((char *)(bp) + GET_SIZE(((char *)(bp) - DSIZE))) 

#define PREV_BLKP(bp) ((char *)(bp) - GET_SIZE(((char *)(bp) - XSIZE))) 


/* single word (4) or double word (8) alignment */
#define ALIGNMENT 8

/* rounds up to the nearest multiple of ALIGNMENT */
#define ALIGN(size) (((size) + (ALIGNMENT-1)) & ~0x7)


#define SIZE_T_SIZE (ALIGN(sizeof(size_t)))

#define BLK_HDR_SIZE ALIGN(sizeof(blockHdr))

/* Read the size and allocated fields from address p */
#define GET_SIZE(p) (GET(p) & ~0x7)
#define GET_ALLOC(p) (GET(p) & 0x1) 
 


typedef struct header blockHdr;

// defining a global struct
struct header{
	size_t size;
	blockHdr *next_p; // pointer to next free block
	blockHdr *prior_p; // pointer to previous free block
};


/*declaration of functions used in the code*/
void *find_fit(size_t size); 
void print_heap();
static void *coalesce(void *);

/* 
 * mm_init - initialize the malloc package.
 */
int mm_init(void) 
{
    	blockHdr *p = mem_sbrk(BLK_HDR_SIZE); // requesting heapspace of blockheader size
	p->size = BLK_HDR_SIZE; /* setting the parameters*/
	p->next_p = p;
	p->prior_p = p;
	return 0;
}

/* 
 * mm_malloc - Allocate a block by incrementing the brk pointer.
 *     Always allocate a block whose size is a multiple of the alignment.
 */
void *mm_malloc(size_t size)
{
    int newsize = ALIGN(BLK_HDR_SIZE + size); //aligning the size
    blockHdr *bp = find_fit(newsize); // checking for a freeblock using first fit
    if(bp==NULL)  // when sufficient free space is not available
    {
	bp = mem_sbrk(newsize); 
    
    if ((long)bp == -1) // when requested space is not in the memory
	return NULL;
    else                          // memory has the requested space
	bp->size = newsize | 1;  // modifying the size of bp
    }
    else{                       // extending the heap
		bp->size |= 1;
		bp->prior_p->next_p = bp->next_p;
		bp->next_p->prior_p = bp->prior_p;
	}
	return (char *)bp + BLK_HDR_SIZE; // pointer to the payload
	
}
void print_heap()          // prints the status,address and size of the blocks 
{                 
	blockHdr *bp = mem_heap_lo();
	while(bp<(blockHdr *)mem_heap_hi()){
		printf("%s block at  %p,size %d\n",(bp->size&1)?"allocated":"free",bp ,(int)(bp->size & ~1));
		bp = (blockHdr *)((char *)bp +(bp->size & ~1));

	}
}
void *find_fit(size_t size) // finding the first free block available
{
	blockHdr *p;
	for(p = ((blockHdr *)mem_heap_lo())->next_p;
		p != mem_heap_lo() && p->size < size;
		p = p->next_p); // starting from block after the prologue,traversing till we get the first free block 
	if(p!=mem_heap_lo())  // when the block is available
		return p;
	else 
		return NULL; // block not available
}
	
/*
 * mm_free - Freeing a block does nothing.
 */
void mm_free(void *ptr)   // freeing an allocted block 
{
	blockHdr *bp = ptr-BLK_HDR_SIZE, 
                 *head = mem_heap_lo();     

	/*  changing the status from allocated to free  */
	
	bp->size &= ~1;
	bp->next_p = head->next_p;
	bp->prior_p = head;
	head->next_p = bp;
	bp->next_p->prior_p = bp;
}



/*
 * mm_realloc - Implemented simply in terms of mm_malloc and mm_free
 */
void *mm_realloc(void *ptr, size_t size)  // to reallocate an already allocated block 
{
    void *oldptr = ptr;
    void *newptr;
    size_t copySize;
    
    newptr = mm_malloc(size);  // allocate the same block with new size
    if (newptr == NULL) // enough space is not available in the memory
      return NULL;
    copySize = *(size_t *)((char *)oldptr - SIZE_T_SIZE);  // aligning the new size
    if (size < copySize) //requested size is lesser than the size of previously allocated block
      copySize = size;   
    memcpy(newptr, oldptr, copySize); // creating a copy of old block with new size
    mm_free(oldptr); // freeing the space of the old block 
    return newptr;

	return NULL;
}

static void *coalesce(void *bp)   // to merge neighboring free blocks
	{ 
	size_t prev_alloc = GET_ALLOC(FTRP(PREV_BLKP(bp)));  // getting the status of next block
	size_t next_alloc = GET_ALLOC(HDRP(NEXT_BLKP(bp)));  // getting the status of previous free block                               
	size_t size = GET_SIZE(HDRP(bp));                    // getting the size of the header                            

	if (prev_alloc && next_alloc) { return bp;  }         // both neighboring blocks are allocated
	else if (prev_alloc && !next_alloc) {                 // previous block allocated & next free
	  	size += GET_SIZE(HDRP(NEXT_BLKP(bp)));        
                PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));
                PUT(HDRP(bp), PACK(size, 0));
                

	}
	else if (!prev_alloc && next_alloc) {                  // previous block free & next allcated
		size += GET_SIZE(HDRP(PREV_BLKP(bp))); 
		PUT(FTRP(bp), PACK(size, 0)); 
		PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
	 	bp = PREV_BLKP(bp); 
   	}	
	else if (!prev_alloc && !next_alloc) {                 // both neighboring blocks are free
		size += GET_SIZE(HDRP(PREV_BLKP(bp)))+GET_SIZE(HDRP(NEXT_BLKP(bp)));
                PUT(FTRP(NEXT_BLKP(bp)), PACK(size, 0));
                PUT(HDRP(PREV_BLKP(bp)), PACK(size, 0));
                bp = PREV_BLKP(bp);

	}
	return bp;
}







